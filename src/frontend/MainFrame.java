/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;

import backend.Circle;
import backend.Square;
import backend.Rectangle;
import backend.Shape;
import java.util.*;
import javax.swing.JFileChooser;
import java.io.*;
import java.awt.*;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import backend.LineSegment;

/**
 *
 * @author USER
 */
public class MainFrame extends javax.swing.JFrame {

    public static DrawingPanel drawingPanel;
    public ArrayList<Shape> shapes;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        drawingPanel = new DrawingPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawingPanel1 = new frontend.DrawingPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vector Drawing Application");

        drawingPanel1.setBackground(new java.awt.Color(255, 255, 255));
        drawingPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout drawingPanel1Layout = new javax.swing.GroupLayout(drawingPanel1);
        drawingPanel1.setLayout(drawingPanel1Layout);
        drawingPanel1Layout.setHorizontalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 385, Short.MAX_VALUE)
        );
        drawingPanel1Layout.setVerticalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 322, Short.MAX_VALUE)
        );

        jButton1.setBackground(java.awt.SystemColor.activeCaption);
        jButton1.setText("Circle");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(java.awt.SystemColor.activeCaption);
        jButton2.setText("Line");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(java.awt.SystemColor.activeCaption);
        jButton3.setText("Square");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(java.awt.SystemColor.activeCaption);
        jButton4.setText("Rectangle");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jComboBox1.setBackground(java.awt.SystemColor.activeCaption);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Shape");

        jButton5.setBackground(java.awt.SystemColor.activeCaption);
        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(java.awt.SystemColor.activeCaption);
        jButton6.setText("Colorize");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(java.awt.SystemColor.activeCaption);
        jButton7.setText("Resize");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(java.awt.SystemColor.activeCaption);
        jButton8.setText("Save");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(java.awt.SystemColor.activeCaption);
        jButton9.setText("Load");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setBackground(java.awt.SystemColor.activeCaption);
        jButton10.setText("Move");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton9))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(0, 5, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drawingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(28, 28, 28)
                        .addComponent(jButton2)
                        .addGap(32, 32, 32)
                        .addComponent(jButton3)
                        .addGap(30, 30, 30)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton8)
                            .addComponent(jButton9))
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7)
                            .addComponent(jButton10)))
                    .addComponent(drawingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CircleUserInput input = new CircleUserInput(drawingPanel1);
        input.setVisible(true);
        String circleName = "Circle " + (jComboBox1.getItemCount() + 1);
        jComboBox1.addItem(circleName);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        SquareUserInput input = new SquareUserInput(drawingPanel1);
        input.setVisible(true);
        String squareName = "Square " + (jComboBox1.getItemCount() + 1);
        jComboBox1.addItem(squareName);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        RectUserInput input = new RectUserInput(drawingPanel1);
        input.setVisible(true);
        String rectName = "Rectangle " + (jComboBox1.getItemCount() + 1);
        jComboBox1.addItem(rectName);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        LineUserInput input = new LineUserInput(drawingPanel1);
        input.setVisible(true);
        String lineName = "Line " + (jComboBox1.getItemCount() + 1);
        jComboBox1.addItem(lineName);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int index = jComboBox1.getSelectedIndex();
        Shape shape = drawingPanel1.getShapes()[index];
        drawingPanel1.removeShape(shape);
        jComboBox1.removeItem(jComboBox1.getSelectedItem());
        drawingPanel1.repaint();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int index = jComboBox1.getSelectedIndex();
    if (index >= 0 && index < drawingPanel1.shapes.size()) {
        Shape selectedShape = drawingPanel1.shapes.get(index);
        Color chosenColor = JColorChooser.showDialog(null, "Choose Outline Color", selectedShape.getColor());
        if (chosenColor != null) {
            selectedShape.setColor(chosenColor);
            drawingPanel1.repaint(); // Redraw with new color
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a shape first.");
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String selectedShape = (String) jComboBox1.getSelectedItem();

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        Shape shape = drawingPanel1.shapes.get(jComboBox1.getSelectedIndex());

        if (shape instanceof LineSegment) {
            String message1 = JOptionPane.showInputDialog("Enter New End Point (x):");
            String message2 = JOptionPane.showInputDialog("Enter New End Point (y):");
            LineSegment l = (LineSegment) shape;
            int endX = Integer.parseInt(message1);
            int endY = Integer.parseInt(message2);
            Map<String, Double> properties = new HashMap<>();
            Point endPoint = new Point(endX, endY);
            l.endPoint=endPoint;

            //public LineSegment(Point position, Color color, Map<String, Double> properties,Point endPoint) 
            //LineSegment line = new LineSegment(l.getPosition(), l.getColor(), properties, endPoint);
            //drawingPanel1.removeShape(l);
            //drawingPanel1.addShape(line);
            drawingPanel1.repaint();
        }
        if (shape instanceof Square) {

            String message = JOptionPane.showInputDialog("Enter New Side:");
            Square s = (Square) shape;
            double side = Double.parseDouble(message);
            Map<String, Double> properties = s.getProperties();
            properties.put("side", side);
            s.getProperties().put("width", side);
            s.getProperties().put("length", side);
            s.width = side;
            s.length = side;
            //Square sq=new Square(s.getPosition(),properties,s.getColor(),s.getFillColor());
            //drawingPanel1.removeShape(s);
            //drawingPanel1.addShape(sq);
            drawingPanel1.repaint();
        } else if (shape instanceof Rectangle) {
            String message1 = JOptionPane.showInputDialog("Enter New Length:");
            String message2 = JOptionPane.showInputDialog("Enter New Width:");
            Rectangle r = (Rectangle) shape;
            double length = Double.parseDouble(message1);
            double width = Double.parseDouble(message2);
            Map<String, Double> properties = new HashMap<>();
            properties.put("length", length);
            properties.put("width", width);
            r.length=length;
            r.width=width;
            //Rectangle rect = new Square(r.getPosition(), properties, r.getColor(), r.getFillColor());
            //drawingPanel1.removeShape(r);
            //drawingPanel1.addShape(rect);
            drawingPanel1.repaint();
        } else if (shape instanceof Circle) {
            System.out.println("ANA CIRC");
            String message = JOptionPane.showInputDialog("Enter New Radius:");
            Circle c = (Circle) shape;
            double radius = Double.parseDouble(message);
            Map<String, Double> properties = new HashMap<>();
            properties.put("radius", radius);
            c.radius=radius;
            //Circle cir = new Circle(c.getPosition(), properties, c.getColor(), c.getFillColor());
            //drawingPanel1.removeShape(c);
            //drawingPanel1.addShape(cir);
            drawingPanel1.repaint();
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        JFileChooser c = new JFileChooser();
        int choice = c.showOpenDialog(this);
        File f = c.getSelectedFile();
        if (choice == JFileChooser.CANCEL_OPTION) {
            drawingPanel1.shapes.clear();
            jComboBox1.removeAllItems();
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(f))) {
            for (int i = 0; i < drawingPanel1.shapes.size(); i++) {
                Shape shape = drawingPanel1.shapes.get(i);
                if (shape instanceof Square) {
                    Square s = (Square) shape;
                    writer.write("Square," + s.getPosition().getX() + "," + s.getPosition().getY() + "," + s.length + "," + s.width + "," + s.getColor().getRGB());
                    if (s.getFillColor() != null) {
                        writer.write("," + s.getFillColor().getRGB());
                    }
                    writer.newLine();
                } else if (shape instanceof Rectangle) {
                    Rectangle r = (Rectangle) shape;
                    writer.write("Rectangle," + r.getPosition().getX() + "," + r.getPosition().getY() + ","
                            + r.length + "," + r.width + "," + r.getColor().getRGB());
                    if (r.getFillColor() != null) {
                        writer.write("," + r.getFillColor().getRGB());
                    }
                    writer.newLine();
                } else if (shape instanceof Circle) {
                    Circle cir = (Circle) shape;
                    writer.write("Circle," + cir.getPosition().getX() + "," + cir.getPosition().getY() + ","
                            + cir.radius + "," + "," + cir.getColor().getRGB());
                    if (cir.getFillColor() != null) {
                        writer.write("," + cir.getFillColor().getRGB());
                    }
                    writer.newLine();
                } else {
                    LineSegment l = (LineSegment) shape;
                    writer.write("Line," + l.getPosition().getX() + "," + l.getPosition().getY() + "," + l.endPoint.x + "," + l.endPoint.y + "," + l.getColor().getRGB());
                    writer.newLine();
                }
            }
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        Shape shape = drawingPanel1.shapes.get(jComboBox1.getSelectedIndex());
        Move m = new Move(drawingPanel1, shape);
        m.setVisible(true);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        JFileChooser c = new JFileChooser();
        int choice = c.showOpenDialog(this);
        File f = c.getSelectedFile();
        if (choice == JFileChooser.APPROVE_OPTION) {
            drawingPanel1.shapes.clear();
            jComboBox1.removeAllItems();
            try (BufferedReader reader = new BufferedReader(new FileReader(f))) {
                String line;
                int count = jComboBox1.getItemCount();
                while ((line = reader.readLine()) != null) {
                    String[] segments = line.split(",");
                    int x = (int) Double.parseDouble(segments[1]);
                    int y = (int) Double.parseDouble(segments[2]);
                    Point position = new Point(x, y);
                    if (segments[0].equals("Rectangle")) {
                        double length = Double.parseDouble(segments[3]);
                        double width = Double.parseDouble(segments[4]);
                        Map<String, Double> properties = new HashMap<>();
                        properties.put("length", length);
                        properties.put("width", width);
                        int RGB = Integer.parseInt(segments[5]);
                        Color fill = null;
                        Color col = new Color(RGB);
                        if (segments.length == 7) {
                            int RGBfill = Integer.parseInt(segments[6]);
                            fill = new Color(RGBfill);
                        }
                        Rectangle r = new Rectangle(position, properties, col, fill);
                        r.setFillColor(fill);
                        drawingPanel1.addShape(r);
                        jComboBox1.addItem("Rectangle" + ++count);
                    } else if (segments[0].equals("Square")) {
                        double side = Double.parseDouble(segments[3]);
                        Map<String, Double> properties = new HashMap<>();
                        properties.put("length", side);
                        properties.put("width", side);
                        int RGB = Integer.parseInt(segments[5]);
                        Color fill = null;
                        Color col = new Color(RGB);
                        if (segments.length == 7) {
                            int RGBfill = Integer.parseInt(segments[6]);
                            fill = new Color(RGBfill);
                        }
                        Square s = new Square(position, properties, col, fill);
                        s.setFillColor(fill);
                        drawingPanel1.addShape(s);
                        jComboBox1.addItem("Square" + ++count);
                    } else if (segments[0].equals("Circle")) {
                        double radius = Double.parseDouble(segments[3]);
                        Map<String, Double> properties = new HashMap<>();
                        properties.put("radius", radius);
                        int RGB = Integer.parseInt(segments[5]);
                        Color fill = null;
                        Color col = new Color(RGB);
                        if (segments.length == 7) {
                            int RGBfill = Integer.parseInt(segments[6]);
                            fill = new Color(RGBfill);
                        }
                        Circle cir = new Circle(position, properties, col, fill);
                        cir.radius=radius;
                        cir.setFillColor(fill);
                        drawingPanel1.addShape(cir);
                        jComboBox1.addItem("Circle" + ++count);
                    } else if (segments[0].equals("Line")) {
                        int x2 = (int) Double.parseDouble(segments[3]);
                        int y2 = (int) Double.parseDouble(segments[4]);
                        Point endPoint = new Point(x2, y2);
                        int RGB = Integer.parseInt(segments[5]);
                        Color col = new Color(RGB);
                        Map<String, Double> props = new HashMap<>(); // optional if your LineSegment requires it
                        LineSegment l = new LineSegment(position, col, props, endPoint);
                        drawingPanel1.addShape(l);
                        jComboBox1.addItem("Line" + ++count);
}
                }

                drawingPanel1.repaint();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error reading file: " + ex.getMessage());
            }

        }

    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private frontend.DrawingPanel drawingPanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
